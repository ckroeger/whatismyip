<!doctype html>
<html lang="en">
<head>
<title>My External IP address - 201.209.86.139</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<style type="text/css">
/* css/style.css */
html,body{font-family:sans-serif;box-sizing:border-box;width:100%;background-color:#fff;color:#081532}
html,body,div{padding:0;margin:0;}
*,*:before,*:after{box-sizing:inherit}
a{color:#000;font-weight:bold}
#wrapper{width: 90%; margin:3em auto}
hr{border:0;border-bottom:3px solid #000}
#header h1 {float:left;margin-top:0}
#navi {float:right;margin-top: 0;padding-top:0;}
#navi li{float:left;padding-left:20px;list-style:none;}
li.sep{padding-top:1em;}
#navi li.flattr {float: right;}
#content{padding:0 0 3em 0; clear: both;position:relative;z-index:0}
#ip{padding:1em 0 0.25em 0;font-size:200%;font-family:inherit;font-weight:bold;text-align:left;position:relative;width:100%;background:#fff;border:0;-webkit-text-fill-color:rgba(0,0,0,1);resize:none;white-space:nowrap;z-index:10}
#ip:focus{outline:none}
#port{opacity:0;z-index:1;}
#ip:hover+#port{opacity: 1;-webkit-transition: opacity 0.25s ease-in; -moz-transition: opacity 0.25s ease-in; -o-transition: opacity 0.25s ease-in; -ms-transition: opacity 0.25s ease-in; transition: opacity 0.25s ease-in;}
#sidebar{position:absolute;top:80px;right:0;width:250px;margin:0;vertical-align:top;text-align:left;}
#footer{vertical-align:bottom;font-size:.75em;}
.inline-pre{background:#ccc;}
pre,pre.prettyprint{color:#fff;background:#112;padding:1em !important;border-radius:2px;border-width:0 !important;overflow-x:auto}
blockquote{font-style:italic;}
.mobile #navi,.mobile #header h1{float:none}
.mobile #navi{padding-left:0;padding-bottom:1.5em}
.mobile #navi>li.first{padding-left:0}
.mobile li.flattr>a{position:absolute;top:0;right:0}
.mobile .dots {display:none}
#ad-big {display:block}
#ad-small {display:none}
.ads-wrapper{overflow:hidden}
table.ripe-wrapper td.descr { text-align: right; text-transform: uppercase; font-weight: bold; padding-right: 2rem; }
table.ripe-wrapper td.value { }
dl.news-entry {cursor:pointer}
dl.news-entry dd { height: 0; opacity: 0; overflow: hidden;
    -webkit-transition: opacity 1s;
    -moz-transition: opacity 1s;
    transition: opacity 1s;
}
dl.current.news-entry dd, dl.news-entry:active dd,
dl.news-entry:hover dd { height: auto; opacity: 1}
dl#api{background:#112;color:#fff;padding:10px}
dl#api .method{color:#f80}
dl#api:after{content:" ";display:table;clear:both;}
dl#api dt{clear:both; float: left}
dl#api dd {padding-left: 25%}
section{padding:10px;position:relative;margin-top:20px}
.row:after{content:" ";display:table;clear:both}
.row>.col{float:left;border-left:10px solid transparent;border-right:10px solid transparent}
.row>.col:first-child{border-left:0}
.row>.col:last-child{border-right:0}
.row>.col.col-6{width:50%}
.hidden{visibility:hidden}
.none{display:none}
h4{margin-bottom: 0}
.shell-break { display: none; }
@media (max-width:960px) {
    span.shell-break { display: inline }
    span.shell-break:after { content: "\000a\0009"; white-space: pre }
}
@media (max-width:827px) { 
    #ip[data-ip^="["] { font-size: 175%; }
}
@media (max-width:780px) {
    #ip[data-ip^="["] { font-size: 150%; }
    span.shell-break { display: none }
    .row>.col {float:none;width:100% !important;border:0}
}
@media (max-width:640px) { #ad-big {display:none} #ad-small {display:block} }
@media (max-width:630px) { #ip[data-ip^="["] { font-size: 120%; } }
@media (max-width:480px) { #ip[data-ip^="["] { font-size: 105%; } }

/* css/prettify.css */
.str{color:#cfc;}.kwd{color:#8ff;}.com{color:#800;}.typ{color:#8ff;}.lit{color:#0f8;}.pun{color:#fff;}.pln{color:#f80;font-weight:bold;}.tag{color:#00f;}.atn{color:#f0f;}.atv{color:#0f0;}.dec{color:#f0f;}pre.prettyprint{padding:2px;border:1px solid #888;}ol.linenums{margin-top:0;margin-bottom:0;}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style:none;}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee;}
        </style>
</head>
<body onload="prettyPrint()">
<div id="wrapper"><div id="header"><ul id="navi"><li class="first"><a href="/" title="home">home</a></li><li><a href="#about" title="what is myexternalip all about?">about</a></li><li><a href="#news" title="news / new features">news</a></li><li><a href="#howto" title="how to use myexternalip">howto</a></li><li><a href="raw" title="the raw ip" rel="nofollow">raw</a></li></ul><h1>My External IP address is <span class="dots">...</span></h1></div><div id="content"><hr/><textarea id="ip" data-ip="201.209.86.139" cols="81" rows="1" autofocus="" readonly="" onclick="this.setSelectionRange(0, 9999);">201.209.86.139</textarea><div id="port" data-port="48052">Port: 48052</div><hr/>  <div class="ads-wrapper"><div id="ad-big"><ins class="adsbygoogle" style="display:inline-block;width:768px;height:90px" data-ad-client="ca-pub-5148174627363381" data-ad-slot="2328744950"></ins></div><div id="ad-small"><ins class="adsbygoogle" style="display:inline-block;width:320px;height:100px" data-ad-client="ca-pub-5148174627363381" data-ad-slot="1095370551"></ins></div></div>   <h2 id="about">What is <em>My External IP</em> all about?</h2><p> Every device connected to a network which uses the <a href="">Internet Protocol</a> has an unique <a href="http://en.wikipedia.org/wiki/IP_address">IP address</a> assigned to it. The global pool of such interconnected networks is known <a href="http://en.wikipedia.org/wiki/Internet">the internet</a>. </p><p> Sometimes, when looking at it from the outside of the network, the IP address of a device seems to be different from the one assigned in the original (sub)network. This is due some mechanisms such as <a href="">NAT</a>. </p><p><em>My External IP</em> displays the IP address of the device as it seems from <em>the outside</em> (hence <em>external</em>). </p><hr/><h2 id="news">News / New Features</h2><dl class="current news-entry"><dt>2016-07-10 Added: Show RIPE information about the IP number.</dt><dd></dd></dl><dl class="current news-entry"><dt>2015-10-30 Added: FreeBSD fetch sample.</dt><dd></dd></dl><dl class="current news-entry"><dt>2015-08-03 Added: AutoHotkey sample.</dt><dd></dd></dl><dl class="current news-entry"><dt>2015-02-23 Added: Erlang and Elixir samples</dt><dd></dd></dl><dl class="current news-entry"><dt>2015-01-07 Enabled: ipv4.myexternalip.com and ipv6.myexternalip.com.</dt><dd><p>I switched on ipv4.myexternalip.com which answers only to requests coming in via IPv4. ipv6.myexternalip.com will do the same for IPv6. This might come in handy when you test your setup or toy around with IPv6.</p><p>Btw: Happy 2015!</p></dd></dl><dl class="current news-entry"><dt>2014-12-08 myexternalip.com in the wild</dt><dd><p>Here are some clever uses of myexternalip.com I've seen in the wild:</p><ul><li><a href="https://github.com/phoemur/ipgetter">ipgetter - Utility to fetch your external IP address</a></li><li><a href="https://github.com/onigoetz/dyn53">Dyn53 - Update DNS records dynamically with Amazon Route 53</a></li><li><a href="http://tom-chapman.uk/2014/03/18/cloudflare-and-dynamic-dns/">CLOUDFLARE AND DYNAMIC DNS - Tom CHapman's Blog</a></li><li><a href="http://www.minecraftforum.net/forums/support/server-support/2077893-help-with-my-server">Minecraft Forum</a></li><li><a href="http://www.mashupnerd.com/2013/02/10/raspberry-pi-direct-webserver-jboss-to-url/">Raspberry PI - direct webserver (JBoss) to URL</a></li></ul></dd></dl><dl class="news-entry"><dt>2014-12-04 Support for JSON / JSON-P</dt><dd><p> I added support for JSON / JSON-P to make retrieving the IP via Javascript a little bit easier. There are two options: </p><ul><li>JSON: <a href="http://myexternalip.com/json">http://myexternalip.com/json</a></li><li>JSON-P: <a href="http://myexternalip.com/json?jsonp=yourCallback">http://myexternalip.com/json?jsonp=yourCallback</a></li></ul></dd></dl><dl class="news-entry"><dt>2014-08-26 Flattr and throttle</dt><dd><p>Flattr: I created a <a href="https://flattr.com">flattr-account</a> and start accepting donations (small, big, does not matter). If you want to donate by other means: contact me. </p><p> Throttle: some folks out there have either running <a href="#curl">curl</a> in a while-loop or a crazy understanding of how often their external ip changes or they need some tool to help keeping a line busy. Whatever the case might be: 20+ requests / second is way too often and thus I decided to throttle the answer a little bit. The good folks among you won't hardly notice it at all, the .. strange .. folks might. </p></dd></dl><dl class="news-entry"><dt>2014-03-11 Introducing access rate</dt><dd><p>Usually this service runs very low profile and without much handholding. Recently I watched at the load and then on some logs and on some more logs and on some tcpdumps: One machine out there wanted to know it's IP at the rate of ~ 100 times a second. Heart-warming. Especially when the IP does not change at all. And especially when the user agent looks like <span class="inline-pre">"/tmp/.botc3 / 82d7f55ef6a49ab4e49d89caa5ea10ba"</span></p><p>So, the new access rate for everyone is around 1/s.</p><p>And you, young fella at 118.175.31.x ... you are banned! :)</p></dd></dl><dl class="news-entry"><dt>2013-09-29 activated IPv6</dt><dd><p>'My External IP' can be reached via IPv6 now as well.</p><p>With IPv6 the whole NATting is kind of pointless and most devices will have a 'real' IP address with IPv6 but you still can use <a href="http://myexternalip.com">myexternalip.com</a> to check if your network works as expected. </p><p>Looks like you are using IPv4. </p></dd></dl><dl class="news-entry"><dt>2013-08-16 added 'My-External-Ip' header</dt><dd><p>Whenever you HEAD http://myexternalip.com, you will find your IP will be there (hint: in the 'my-external-ip' header)!</p><p>Checkout <a href="#netcat-head">some</a> of the <a href="#python-request-head">examples</a> on how to make use of that feature</p></dd></dl><hr/><h2 id="howto">How to use <em>My External IP</em> - API</h2><p>So, how to use this site in your environment (other than just surfing it with a browser)?</p><div><p>Rate limit: if you exceed the rate limit of 30 requests/minute, you will receive status <a href="http://tools.ietf.org/html/rfc6585#section-4">code 429</a> If you continue to exceed that limit and start to annoy me you will get banned at the IP filter level. Sorry, but I do not see the need to retrieve the IP more than maybe once every minute, 30 requests per minute is good will on my behalf. </p><p>API-Endpoints:</p><dl id="api"><dt><span class="method">GET</span> /raw</dt><dd>Plain IP address</dd><dt><span class="method">GET</span> /json</dt><dd>IP address in JSON format</dd><dt><span class="method">GET</span> /json?jsonp=callback</dt><dd>IP address as JSONP-ready script ("function call"). 'callback' must fit the following constraints: <ol><li>Max-length: 64</li><li>Begins with [_a-zA-Z]</li><li>Continues with [_a-zA-Z0-9]</li></ol></dd></dl></div><p>Here is a list of ideas to get you started:</p><ul><li><a href="#curl">CURL</a><a href="#curl">(HEAD)</a></li><li><a href="#wget">WGet</a></li><li><a href="#fetch">Fetch</a></li><li><a href="#netcat">NetCat</a><a href="#netcat-head">(HEAD)</a></li><li class="sep"><a href="#bits">BITS</a> (Windows only)</li><li><a href="#powershell">Powershell 2.0</a> (Windows only)</li><li class="sep"><a href="#golang">Golang</a></li><li><a href="#nodejs">Javascript via NodeJS</a></li><li><a href="#nodejs-request">Javascript via NodeJS + Request</a></li><li><a href="#jquery">Javascript (jQuery)</a></li><li><a href="#python">Python</a><a href="#python-oneliner">(One-Liner)</a><a href="#python-request">(using 'request')</a><a href="#python-request-head">(using 'request' + HEAD)</a></li><li><a href="#ruby">Ruby</a><a href="#ruby-oneliner">(One-Liner)</a></li><li><a href="#perl">Perl</a><a href="#perl-oneliner">(One-Liner)</a></li><li><a href="#fsharp">F#</a></li><li><a href="#php">Php</a></li><li><a href="#cl">Common Lisp</a></li><li><a href="#erlang">Erlang</a></li><li><a href="#elixir-httpc">Elixir - httpc</a></li><li><a href="#elixir-httpoison">Elixir - HTTPoison</a></li><li><a href="#autohotkey">AutoHotkey (AHK)</a></li></ul><section class="raise"><h3 id="curl">CURL</h3><p>to quote from the homepage of '<a href="http://curl.haxx.se/" title="curl homepage">curl</a>': </p><blockquote> curl is a command line tool for transferring data with URL syntax, supporting FTP, FTPS, HTTP, HTTPS, SCP, SFTP, TFTP, TELNET, DICT, LDAP, LDAPS, FILE, IMAP, SMTP, POP3, RTMP and RTSP. curl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, kerberos...), file transfer resume, proxy tunneling and a busload of other useful tricks. </blockquote><div class="row"><div class="col col-6"><h4>RAW</h4><pre class="prettyprint">
$&gt; curl "http://myexternalip.com/raw"</pre></div><div class="col col-6"><h4>HEAD</h4><pre class="prettyprint">
$&gt; curl -I "http://myexternalip.com"</pre></div></div></section><section><h3 id="wget">WGET</h3><p>to quote from the homepage of '<a href="http://www.gnu.org/software/wget/" title="wget homepage">wget</a>':</p><blockquote> GNU Wget is a free software package for retrieving files using HTTP, HTTPS and FTP, the most widely-used Internet protocols. It is a non-interactive commandline tool, so it may easily be called from scripts, cron jobs, terminals without X-Windows support, etc. </blockquote><pre class="prettyprint">
$&gt; wget -q -O - "http://myexternalip.com/raw"</pre></section><section><h3 id="fetch">FETCH</h3><p>to quote from the homepage of '<a href="https://www.freebsd.org/cgi/man.cgi?fetch(1)" title="fetch homepage">fetch</a>':</p><blockquote>fetch -- retrieve a file by Uniform Resource Locator</blockquote><pre class="prettyprint">
$&gt; fetch -q -o - "http://myexternalip.com/raw"</pre></section><section class="raise"><h4 id="netcat">NETCAT</h4><div class="row"><div class="col col-6"><h4 class="hidden">NETCAT</h4><p>often cited as the "Swiss Army Knife for TCP/IP" you can use netcat to obtain your external ip. this approach also works with netcat-alikes such as socat or even with telnet: </p><pre class="prettyprint">
$&gt; echo -ne "GET /raw HTTP/1.1\r\n\r\n" | \
    nc myexternalip.com 80</pre></div><div class="col col-6"><h4 id="netcat-head">NETCAT, HEAD method</h4><p>just like the regular netcat version, just ask the server to deliver just the HEAD-information </p><pre class="prettyprint">
$&gt; echo -ne "HEAD / HTTP/1.1\r\n\r\n" | \
    nc myexternalip.com 80</pre></div></div></section><section><h4>Microsoft Windows</h4><div class="row"><div class="col col-6"><h4 id="powershell">Powershell</h4><p>Powershell is the replacement for the 'old' cmd.exe, it is a builtin of the Windows OS since Windows7 and Windows Server 2008 R2. It is also available as an additional feature for WindowsXP, WindowsVista and Windows Server. </p><pre class="prettyprint">
$&gt; $wc = new-object System.Net.WebClient
$&gt; $url="http://myexternalip.com/raw"
$&gt; $wc.DownloadString($url)</pre></div><div class="col col-6"><h4 id="bits">BITS</h4><p>BITS stands for "Background Intelligent Transfer Service", it is a builtin tool of the Windows OS.</p><pre class="prettyprint">
$&gt; set URL="http://myexternalip.com/raw"
$&gt; bitsadmin /transfer "myip" <span class="shell-break">`</span><span class="none">`</span>"%URL%" "%TEMP%"\myip.txt
$&gt; type "%TEMP%"\myip.txt</pre></div></div></section><section><h3 id="golang">Golang</h3><pre class="prettyprint lang-go">
package main

import ( "io"; "net/http"; "os" )

func main() {
    resp, err := http.Get("http://myexternalip.com/raw")
    if err != nil {
        os.Stderr.WriteString(err.Error())
        os.Stderr.WriteString("\n")
        os.Exit(1)
    }
    defer resp.Body.Close()
    io.Copy(os.Stdout, resp.Body)
})</pre></section><section><h3>Javascript</h3><div class="row"><div class="col col-6"><h4 id="nodejs">NodeJS</h4><pre class="prettyprint lang-js">
var http = require('http');
var url = 'http://myexternalip.com/raw';
http.get(url, function(r) {
  r.setEncoding('utf8');
  r.on('data', console.log.bind(console));
});
</pre></div><div class="col col-6"><h4 id="nodejs-request">NodeJS + request</h4><pre class="prettyprint lang-js">
var request = require('request');
var url = 'http://myexternalip.com/raw';
request(url, function (err, resp, myip) {
  console.log(myip);
}</pre></div></div><div class="row"><div class="col col-6"><h4 id="jquery">jQuery (JSONP)</h4><pre class="prettyprint lang-js">
jQuery.ajax({jsonp: 'jsonp',
  dataType: 'jsonp',
  url: 'http://myexternalip.com/json',
  success: function(myip) {alert(myip); }
});</pre></div></div></section><section><h3>Python</h3><div class="row"><div class="col col-6"><h4 id="python-oneliner">Python One-Liner</h4><pre class="prettyprint">
$&gt; python -c "import urllib;
    url = 'http://myexternalip.com/raw';
    print urllib.urlopen(url).read()"</pre></div><div class="col col-6"><h4 id="python">Python</h4><pre class="prettyprint lang-py">
import urllib
url = 'http://myexternalip.com/raw'
myip = urllib.urlopen(url).read()

print myip</pre></div></div><div class="row"><div class="col col-6"><h4 id="python-request">Python with 'request'</h4><pre class="prettyprint lang-py">
import requests

url = 'http://myexternalip.com/raw'
r = requests.get(url)
ip = r.text</pre></div><div class="col col-6"><h4 id="python-request-head">Python with 'request', HEAD method</h4><pre class="prettyprint lang-py">
import requests
url = 'http://myexternalip.com'
r = requests.head(url)
ip = r.headers['my-external-ip']</pre></div></div></section><section><h3>Ruby</h3><div class="row"><div class="col col-6"><h4 id="ruby">Ruby</h4><pre class="prettyprint lang-rb">
require 'net/http'
url = 'http://myexternalip.com'
ip = Net::HTTP.get(url, '/raw')

print ip</pre></div><div class="col col-6"><h4 id="ruby-oneliner">Ruby One-Liner</h4><pre class="prettyprint">
$&gt; ruby -e 'require "net/http"; \
    url = "http://myexternalip.com"; \
    Net::HTTP.get_print(url, "/raw")'</pre></div></div></section><section><div class="row"><div class="col col-6"><h4 id="perl">Perl</h4><pre class="prettyprint lang-perl">
use LWP::Simple;
$ip = (get "http://myexternalip.com/raw");

print $ip;</pre></div><div class="col col-6"><h4 id="perl-oneliner">Perl One-Liner</h4><pre class="prettyprint">
$&gt; perl -e 'use LWP::Simple; \
    $url = "http://myexternalip.com/raw";
    print (get $url);'</pre></div></div></section><section><h4 id="fsharp">F#</h4><pre class="prettyprint lang-ml">
open FSharp.Data

printfn "%s" (Http.RequestString("http://myexternalip.com/raw"))</pre><h4 id="php">Php</h4><pre class="prettyprint lang-php">
$&gt; php -r '$u = "http://myexternalip.com/raw";
echo file_get_contents($u);'</pre><h4 id="cl">Common Lisp</h4><pre class="prettyprint lang-ml">
(ql:quickload 'drakma')
(print (drakma:http-request "http://myexternalip.com/raw"))</pre></section><section><div class="row"><h4 id="erlang">Erlang - Native</h4><pre class="prettyprint lang-ml">
inets:start(),
{ok, {_, _, IP}} = httpc:request(get, {"http://myexternalip.com/raw", []}, [], []),
io:format("~s", [IP]).</pre></div><div class="row"><div class="col col-6"><h4 id="elixir-httpc">Elixir - httpc</h4><pre class="prettyprint lang-ml">
:inets.start
:httpc.request(:get, {'http://myexternalip.com/raw', []}, [], [] ) 
|> elem(1) |> elem(2) |> IO.puts</pre></div><div class="col col-6"><h4 id="elixir-httpoison">Elixir - HTTPoison</h4><pre class="prettyprint lang-ml">
HTTPoison.start
{:ok, req} = HTTPoison.get("http://myexternalip.com/raw")
IO.puts req.body
</pre></div></div></section><section><div class="row"><h4 id="autohotkey">AutoHotkey (AHK)</h4><pre class="prettyprint lang-ahk">
WhatIsMyIP()
{
    request := ComObjCreate("WinHttp.WinHttpRequest.5.1")

    timeoutVal := 59000
    request.SetTimeouts(timeoutVal, timeoutVal, timeoutVal, timeoutVal)   
    request.Open("GET", "http://myexternalip.com/raw")
    request.Send()

    return request.ResponseText
}</pre></div></section><hr/><h2 id="contact">Contact</h2><p>If you wish to contact us, please mail to webmaster@myexternalip.com.</p><hr/></div><div id="sidebar"></div><div id="footer"> &copy; 2012 - 2016 myexternalip.com, a service of <a href="https://2hoch5.com">2hoch5.com</a> | powered by <a href="http://www.vim.org/" title="vim - THE editor">vim</a>, <a href="http://golang.org/" title="golang - the go programming language">golang</a> and <a href="http://google-code-prettify.googlecode.com/" title="prettify - javascript syntax highlighting">prettify</a>. <span><a href="https://validator.w3.org/nu/?doc=http://myexternalip.com#">html5 and css21</a></span></div></div><script type="text/javascript">

        // detect mobile browser, set html.mobile if true | variantion of http://detectmobilebrowsers.com/
        var is_mobile=(function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4)))return 1;return 0})(navigator.userAgent||navigator.vendor||window.opera);
        if(is_mobile){document.getElementsByTagName('html')[0].className+='mobile'}
    </script>
<script type="text/javascript" src="js/prettify.js">
</script>
  <script>

      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-56970679-1', 'auto');
      ga('set', 'anonymizeIp', true);
      ga('send', 'pageview');
    </script>
   <script async="" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js">
</script>
<script>
[].forEach.call(document.getElementsByClassName('adsbygoogle'), function() {(adsbygoogle = window.adsbygoogle || []).push({});});</script>
  
</body>
</html>
<!-- https://github.com/mgumz/h5reduce 23837/31209 -->